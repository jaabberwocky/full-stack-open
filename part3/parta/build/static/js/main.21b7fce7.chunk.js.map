{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","obj","getAll","axios","get","then","resp","data","create","newObject","post","update","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","notesToShow","filter","map","find","n","changedNote","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,+BACGH,EAAKI,QADR,IACiB,wBAAQC,QAASJ,EAAjB,SAAoCC,Q,gBCNnDI,EAAU,aAsBDC,EALH,CACVC,OAhBa,WAEb,OADYC,IAAMC,IAAIJ,GACXK,MAAK,SAACC,GAAD,OAAUA,EAAKC,SAe/BC,OAZa,SAACC,GAEd,OADYN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAACC,GAAD,OAAUA,EAAKC,SAW/BI,OARa,SAACC,EAAIH,GAElB,OADYN,IAAMU,IAAN,UAAab,EAAb,YAAwBY,GAAMH,GAC/BJ,MAAK,SAACC,GAAD,OAAUA,EAAKC,UCwDlBO,EAlEH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAOAC,qBALa,WACXC,EAAYrB,SAASG,MAAK,SAACW,GACzBC,EAASD,QAGG,CAACI,IAEjB,IAyBMI,EAAcJ,EAChBJ,EACAA,EAAMS,QAAO,SAAC/B,GAAD,OAA6B,IAAnBA,EAAKG,aAEhC,OACE,gCACE,uCACA,yBAAQE,QAAS,kBAAMsB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,SAEhC,uBACA,yCAAYA,EAAU,MAAQ,YAA9B,YACA,6BACGI,EAAYE,KAAI,SAAChC,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAzBD,SAACiB,GAC1B,IAAMlB,EAAOsB,EAAMW,MAAK,SAACC,GAAD,OAAOA,EAAEhB,KAAOA,KAClCiB,EAAW,2BAAQnC,GAAR,IAAcG,WAAYH,EAAKG,YAChD0B,EAAYZ,OAAOC,EAAIiB,GAAaxB,MAAK,SAACC,GACxCW,EAASD,EAAMU,KAAI,SAAChC,GAAD,OAAWA,EAAKkB,KAAOA,EAAKlB,EAAOY,SAqBxBwB,CAAmBpC,EAAKkB,MAF3ClB,EAAKkB,SAMhB,uBAAMmB,SA9CM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBpC,QAASoB,EACTiB,MAAM,IAAIC,MAAOC,cACjBxC,UAAWyC,KAAKC,SAAW,IAE7BhB,EAAYf,OAAO0B,GAAY7B,MAAK,SAACC,GACnCW,EAASD,EAAMwB,OAAOlC,IACtBa,EAAW,QAqCX,UACE,uBAAOsB,MAAOvB,EAASwB,SAlCJ,SAACV,GACxBb,EAAWa,EAAMW,OAAOF,UAkCpB,wBAAQG,KAAK,SAAb,yBC5DRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.21b7fce7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li>\n      {note.content} <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const req = axios.get(baseUrl);\n  return req.then((resp) => resp.data);\n};\n\nconst create = (newObject) => {\n  const req = axios.post(baseUrl, newObject);\n  return req.then((resp) => resp.data);\n};\n\nconst update = (id, newObject) => {\n  const req = axios.put(`${baseUrl}/${id}`, newObject);\n  return req.then((resp) => resp.data);\n};\n\nconst obj = {\n  getAll,\n  create,\n  update,\n};\nexport default obj;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n\n  const hook = () => {\n    noteService.getAll().then((notes) => {\n      setNotes(notes);\n    });\n  };\n  useEffect(hook, [showAll]); // if the second arg is empty array, only run on first render\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5, // 50% chance to be important\n    };\n    noteService.create(noteObject).then((resp) => {\n      setNotes(notes.concat(resp));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n    noteService.update(id, changedNote).then((resp) => {\n      setNotes(notes.map((note) => (note.id !== id ? note : resp)));\n    });\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? \"important\" : \"all\"}\n      </button>\n      <br />\n      <i>Showing {showAll ? \"all\" : \"important\"} notes</i>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}